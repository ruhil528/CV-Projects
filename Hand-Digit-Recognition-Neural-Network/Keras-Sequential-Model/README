MNIST Hand Digit Recognition using CNN model

Packages:
tensorflow, keras, sklearn, numpy, matplotlib, seaborn

Dataset:
MNIST hand digit dataset from tf.keras.datasets.mnist

  - Training dataset description:
      Shape of training examples:  (60000, 28, 28, 1)
      Number of training examples:  60000
      Shape of training labels:  (60000,)
      Number of training labels:  60000

  - Testing dataset description:
      Testing examples shape:  (10000, 28, 28)
      Number of testing examples:  10000
      Testing labels shape:  (10000,)
      Number of testing lables:  10000

Model description:
  - Two neural network models built using Dense, Flatten, Activation, ReLU, and softmax
  - Models trained with and without validation set (validation_split=0.2)
  - Models were trainng for 10 epochs with batch size of 500
  - Model analyses were performed using training and validation set error and accuracy plots.
  - True and Predicted and labels were visualized using confusion matrix.

_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_58 (Dense)             (None, 28, 128)           3712      
_________________________________________________________________
flatten_10 (Flatten)         (None, 3584)              0         
_________________________________________________________________
activation_37 (Activation)   (None, 3584)              0         
_________________________________________________________________
dense_59 (Dense)             (None, 64)                229440    
_________________________________________________________________
activation_38 (Activation)   (None, 64)                0         
_________________________________________________________________
dense_60 (Dense)             (None, 10)                650       
=================================================================
Total params: 233,802
Trainable params: 233,802
Non-trainable params: 0
_________________________________________________________________

Results for model without validation set: 
  Test Error: 7.96%
  Test Accuracy: 97.51%

Results for model with validation set: 
  Test Error: 7.72%
  Test Accuracy: 97.70%

Conlcusion and Comments:
 - Two simple neural network models were built using tensorflow and keras 
 - The model with validation set showed higher accuracy and lower error compared to model trained without validation set; 
   however, these results could be further imporved with refined hyperparamter searches, deeper NN, and longer training period
 - The confusion matrix showed two models had similar performance
 - the number of misclassified digits were higher compared to CNN models
