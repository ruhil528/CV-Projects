
MNIST Hand Digit Recognition using CNN model

Packages:
tensorflow, keras, sklearn, numpy, matplotlib, seaborn

Dataset:
MNIST hand digit dataset from tf.keras.datasets.mnist

  - Training dataset description:
      Shape of training examples:  (60000, 28, 28, 1)
      Number of training examples:  60000
      Shape of training labels:  (60000,)
      Number of training labels:  60000

  - Testing dataset description:
      Testing examples shape:  (10000, 28, 28)
      Number of testing examples:  10000
      Testing labels shape:  (10000,)
      Number of testing lables:  10000

Model description:
  - Two CNN models built using Conv2D, MaxPooling2D, Dense, Flatten, Activation, ReLU, and softmax
  - Models trained with and without validation set (validation_split=0.2)
  - Models were trainng for 10 epochs with batch size of 500
  - Model analyses were performed using training and validation set error and accuracy plots.
  - True and Predicted and labels were visualized using confusion matrix.

_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_14 (Conv2D)           (None, 26, 26, 16)        160       
_________________________________________________________________
activation_13 (Activation)   (None, 26, 26, 16)        0         
_________________________________________________________________
max_pooling2d_7 (MaxPooling2 (None, 13, 13, 16)        0         
_________________________________________________________________
conv2d_15 (Conv2D)           (None, 11, 11, 32)        4640      
_________________________________________________________________
activation_14 (Activation)   (None, 11, 11, 32)        0         
_________________________________________________________________
max_pooling2d_8 (MaxPooling2 (None, 5, 5, 32)          0         
_________________________________________________________________
conv2d_16 (Conv2D)           (None, 3, 3, 64)          18496     
_________________________________________________________________
activation_15 (Activation)   (None, 3, 3, 64)          0         
_________________________________________________________________
flatten_4 (Flatten)          (None, 576)               0         
_________________________________________________________________
dense_7 (Dense)              (None, 128)               73856     
_________________________________________________________________
activation_16 (Activation)   (None, 128)               0         
_________________________________________________________________
dense_8 (Dense)              (None, 10)                1290      
=================================================================
Total params: 98,442
Trainable params: 98,442
Non-trainable params: 0
_________________________________________________________________

Results for model without validation set: 
  Test Error: 2.66%
  Test Accuracy: 99.11%

Results for model with validation set: 
  Test Error: 3.22%
  Test Accuracy: 98.95%

Conlcusion and Comments:
 - Two simple CNN models were built using tensorflow and keras 
 - The model without validation set showed higher accuracy and lower error compared to model trained with validation set; 
   however, these results could be further imporved with refined hyperparamter searches and more complex CNN architecture
 - The confusion matrix showed two models had similar performance
 - Among the misclassified digits:
    - Usual suspect: digit '4' misclassified as '9' were in higher number, possibly due to resemblance in the hand written format
    - Unusual suspects: digit '4' misclassified as '6' 
    
